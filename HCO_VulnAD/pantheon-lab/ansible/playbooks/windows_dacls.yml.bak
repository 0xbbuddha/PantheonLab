---
- import_playbook: windows_config.yml

- name: Configuration des Acls sur le object active direcotry
  hosts: pantheon-dc01
  gather_facts: true
  vars:
    ansible_connection: winrm
    ansible_winrm_transport: plaintext
    ansible_winrm_server_cert_validation: ignore
    ansible_user: Administrator
    ansible_password: "{{ lab.hosts.dc01.local_admin_password }}"
    hostname: "{{ lab.hosts.dc01.hostname }}"
    domain: "{{ lab.hosts.dc01.domain }}"
    domain_username: "{{ domain }}\\Administrator"
    domain_password: "{{ lab.hosts.dc01.local_admin_password }}"
    domain_server: "{{ lab.hosts.dc01.hostname }}.{{ domain }}"
    acls: "{{ lab.domains[lab.hosts.dc01.domain].acls }}" 
  tasks:
    - name: Configurer les ACLs
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
              [String]
              $for,

              [String]
              $to,

              [String]
              $right,

              [String]
              $inheritance
          )
          Import-Module ActiveDirectory
          Set-Location AD:
          
          $aclValues = [enum]::GetNames([System.DirectoryServices.ActiveDirectoryRights])
          $aclExtendValues = 'Ext-User-Force-Change-Password', 'Ext-Self-Self-Membership', 'Ext-Write-Self-Membership', 'Ext-ManageCA'
          
          # Récupération du SID de l'identité
          if ($for.StartsWith("NT AUTHORITY")) {
            $forSID = New-Object System.Security.Principal.NTAccount "$for"
          } else {
            $forSID = New-Object System.Security.Principal.SecurityIdentifier (Get-ADObject -Filter "SamAccountName -eq '$for'" -Properties objectSID).objectSID
          }

          # Récupération de l'objet cible
          try {
            $objAcl = get-acl -Path "$to" -ErrorAction Stop
            $objOU = $to
            $objFound = $true
          } catch [System.Management.Automation.ItemNotFoundException] {
            $objFound = $false
          }

          if (-not $objFound) {
            $extra_args = @{}
            if ($to -match "\\") {
              $extra_args.Server = $to.Split("\")[0]
              $to = $to.Split("\")[1]
            }
            $toObj = Get-ADObject -Filter "SamAccountName -eq '$to'" @extra_args
            $objOU = ($toObj).DistinguishedName
            $objAcl = get-acl -Path "$objOU"
          }

          $type = [System.Security.AccessControl.AccessControlType] "Allow"
          $inheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] $inheritance

          $aclExtendedValueRightGUID = @{
            "Ext-User-Force-Change-Password" = @("ExtendedRight","00299570-246d-11d0-a768-00aa006e0529")
            "Ext-Write-Self-Membership" = @("WriteProperty","bf9679c0-0de6-11d0-a285-00aa003049e2")
            "Ext-Self-Self-Membership" = @("Self","bf9679c0-0de6-11d0-a285-00aa003049e2")
            "Ext-ManageCA" = @("ExtendedRight","18e470eb-9b98-47c5-896e-146c5c77100d")
          }

          $Ansible.Changed = $false
          if ($aclValues.contains($right)) {
            $adRight = [System.DirectoryServices.ActiveDirectoryRights] $right
            $ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $forSID,$adRight,$type,$inheritanceType
          }
          if ($aclExtendValues.contains($right)) {
            $extendedRightGUID = $aclExtendedValueRightGUID[$right][1]
            $extright = $aclExtendedValueRightGUID[$right][0]
            $adRight = [System.DirectoryServices.ActiveDirectoryRights] $extright
            $ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $forSID,$extright,$type,$extendedRightGUID,$inheritanceType
          }
          if ($ace) {
            $objAcl.AddAccessRule($ace)
            Set-Acl -AclObject $objAcl -path "$objOU"
            $Ansible.Changed = $true
          }
        parameters:
          for: "{{ item.value.for }}"
          to: "{{ item.value.to }}"
          right: "{{ item.value.right }}"
          inheritance: "{{ item.value.inheritance }}"
      with_dict: "{{ acls }}"
      register: acl_setup
      loop_control:
        label: "{{ item.key }}"


