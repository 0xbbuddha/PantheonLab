#########################################################
# DO Community Playbooks: Wordpress on Ubuntu 18.04 LAMP
#########################################################
---
- hosts: all
  become: true
  vars_files:
    - ../vars/default.yml
    - ../vars/wordpress_vars.yml
    - ../vars/gods_img_pass.yml
    - ../vars/gods_descriptions.yml

  tasks:
    # ---------------------
    # SYSTEM SETUP
    # ---------------------
    - name: Install prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
      tags: [ system ]

    - name: Install LAMP Packages
      apt:
        name: [ 'apache2', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php' ]
        update_cache: yes
        state: latest
      tags: [ system ]

    - name: Install PHP Extensions
      apt:
        name: "{{ item }}"
        update_cache: yes
        state: latest
      loop: "{{ php_modules }}"
      tags: [ system ]

    # ---------------------
    # APACHE SETUP
    # ---------------------
    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'
      tags: [ apache ]

    - name: Set up Apache VirtualHost
      ansible.builtin.template:
        src: "../files/conf/apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
        mode: '0644'
      notify: Reload Apache

    - name: Copy Apache encoding configuration
      ansible.builtin.copy:
        src: "../files/conf/apache2-encoding.conf"
        dest: "/etc/apache2/conf-available/encoding.conf"
        mode: '0644'
      notify: Reload Apache

    - name: Enable encoding configuration
      shell: a2enconf encoding
      notify: Reload Apache
      tags: [ apache ]

    - name: Enable rewrite module
      shell: a2enmod rewrite
      notify: Reload Apache
      tags: [ apache ]

    - name: Enable new site
      shell: a2ensite {{ http_conf }}
      notify: Reload Apache
      tags: [ apache ]

    - name: Disable default Apache site
      shell: a2dissite 000-default.conf
      notify: Restart Apache
      tags: [ apache ]

    # ---------------------
    # MYSQL SETUP
    # ---------------------
    - name: Set the root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Remove anonymous MySQL users
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysql ]

    - name: Remove test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysql ]

    - name: Create WordPress database
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysql ]

    - name: Create WordPress DB user
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysql ]

    # ---------------------
    # UFW SETUP
    # ---------------------
    - name: Allow HTTP through UFW
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp
      tags: [ system ]

    # ---------------------
    # WORDPRESS SETUP
    # ---------------------
    - name: Download WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ http_host }}"
        remote_src: yes
        creates: "/var/www/{{ http_host }}/wordpress"
      tags: [ wordpress ]

    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        recurse: yes
        owner: www-data
        group: www-data
      tags: [ wordpress ]

    - name: Set permissions on directories
      shell: find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \;
      tags: [ wordpress ]

    - name: Set permissions on files
      shell: find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \;
      tags: [ wordpress ]

    - name: Copy Greek god images
      ansible.builtin.copy:
        src: "../files/images/"
        dest: "/var/www/{{ http_host }}/wordpress/wp-content/uploads/"
        mode: '0644'
        owner: www-data
        group: www-data

    - name: Setup wp-config
      ansible.builtin.template:
        src: "../files/conf/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
        mode: '0644'
        owner: www-data
        group: www-data

    - name: Install WP-CLI
      get_url:
        url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        dest: /usr/local/bin/wp
        mode: '0755'

    - name: Check if WordPress is installed
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: wp core is-installed --allow-root
      register: wp_installed
      ignore_errors: yes

    - name: Install WordPress if not present
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp core install \
          --url={{ wordpress_url }} \
          --title="{{ wordpress_site_title }}" \
          --admin_user={{ wordpress_admin_user }} \
          --admin_password={{ wordpress_admin_password }} \
          --admin_email={{ wordpress_admin_email }} \
          --skip-email \
          --allow-root
      when: wp_installed.rc != 0

    - name: Installer le plugin CMP Coming Soon & Maintenance vulnérable
      become_user: www-data
      ansible.builtin.shell: |
        wp plugin install https://downloads.wordpress.org/plugin/cmp-coming-soon-maintenance.4.1.13.zip --force --allow-root
        wp plugin activate cmp-coming-soon-maintenance --allow-root
      args:
        chdir: /var/www/{{ http_host }}/wordpress
      tags: [ cmp_vuln ]

    - name: Set home/siteurl
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp option update home "{{ wordpress_url }}" --allow-root
        wp option update siteurl "{{ wordpress_url }}" --allow-root
      tags: [ wordpress ]


    - name: Enable permalinks
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp rewrite structure '/%postname%/' --hard --allow-root
        wp rewrite flush --allow-root

    - name: Set .htaccess for WordPress
      copy:
        dest: "/var/www/{{ http_host }}/wordpress/.htaccess"
        content: |
          # BEGIN WordPress
          <IfModule mod_rewrite.c>
          RewriteEngine On
          RewriteBase /
          RewriteRule ^index\.php$ - [L]
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule . /index.php [L]
          </IfModule>
          # END WordPress
        owner: www-data
        group: www-data
        mode: '0644'
      tags: [ wordpress ]

    # ... TO BE CONTINUED WITH GOD PAGES, GRID PAGE, MENU, CLEANUP
    #
    - name: Installer et activer le thème WordPress "twentytwentyfive"
      become: yes
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp theme install twentytwentyfive --activate --allow-root
      tags: [ wordpress ]

    - name: Create home page "Bienvenue au mont Olympe"
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp post create \
          --post_type=page \
          --post_title="Bienvenue au mont Olympe" \
          --post_name="bienvenue-au-mont-olympe" \
          --post_content="{{ bienvenue_au_mont_olympe }}" \
          --post_status=publish \
          --allow-root
      tags: [ wordpress ]


    - name: Set "Bienvenue au mont Olympe" as homepage
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp option update show_on_front 'page' --allow-root
        wp option update page_on_front $(wp post list --post_type=page --name="bienvenue-au-mont-olympe" --field=ID --allow-root)

    - name: Create pages for each Greek god
      become_user: www-data
      loop: "{{ greek_gods }}"
      loop_control:
        loop_var: dieu
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        IMAGE_ID=$(wp media import "wp-content/uploads/{{ dieu.img }}" --title="{{ dieu.name }}" --porcelain --allow-root)
        IMAGE_URL=$(wp post get $IMAGE_ID --field=guid --allow-root)
        wp post create \
          --post_type=page \
          --post_title="{{ dieu.name }}" \
          --post_content="<img src='${IMAGE_URL}' style='max-width: 300px'><p>{{ dieu.desc }}</p>" \
          --post_status=publish \
          --allow-root
      tags: [ wordpress ]

    - name: Récupérer les slugs et URLs des dieux depuis WordPress
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        SLUG=$(wp post list --post_type=page --title="{{ dieu.name }}" --field=post_name --allow-root)
        IMG_ID=$(wp post list --post_type=attachment --title="{{ dieu.name }}" --format=ids --allow-root | head -n1)
        IMG_URL=$(wp post get "$IMG_ID" --field=guid --allow-root)
        echo "{{ dieu.name }}|$SLUG|$IMG_URL"
      loop: "{{ greek_gods }}"
      loop_control:
        loop_var: dieu
      register: wp_dieux_data
      changed_when: false
      tags: [ wordpress ]

    - name: Transformer les données en dictionnaire utilisable
      set_fact:
        greek_gods_details: "{{ _god_data }}"
      vars:
        _god_data: >-
          [{% for result in wp_dieux_data.results %}
            {% set parts = result.stdout.split('|') %}
            {"name": "{{ parts[0] | trim }}", "slug": "{{ parts[1] | trim }}", "img_url": "{{ parts[2] | trim }}"}{% if not loop.last %},{% endif %}
          {% endfor %}]
      tags: [ wordpress ]

    - name: Generate HTML page from template
      ansible.builtin.template:
        src: "../files/templates/les-12-dieux.html.j2"
        dest: "/var/www/{{ http_host }}/wordpress/les-12-dieux.html"
        mode: '0644'
        owner: www-data
        group: www-data

    - name: Créer la page WordPress "Les 12 dieux"
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        CONTENT=$(cat les-12-dieux.html)
        wp post create \
          --post_type=page \
          --post_title="Les 12 dieux" \
          --post_name="les-12-dieux" \
          --post_content="$CONTENT" \
          --post_status=publish \
          --allow-root
      tags: [ wordpress ]

    - name: Create main menu
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp menu create "MainMenu" --allow-root || true
        wp theme mod set nav_menu_locations "{\"primary\":2}" --allow-root || true
        PAGE_ID1=$(wp post list --post_type=page --name="bienvenue-au-mont-olympe" --field=ID --allow-root)
        PAGE_ID2=$(wp post list --post_type=page --name="les-12-dieux" --field=ID --allow-root)
        if [ -n "$PAGE_ID1" ]; then
          wp menu item add-post MainMenu "$PAGE_ID1" --title="Accueil" --allow-root
        fi
        if [ -n "$PAGE_ID2" ]; then
          wp menu item add-post MainMenu "$PAGE_ID2" --title="Les 12 dieux" --allow-root
        fi
      tags: [ wordpress ]


    - name: Remove sample and privacy pages
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp post delete $(wp post list --post_type=page --name="sample-page" --format=ids --allow-root) --force --allow-root || true
        wp post delete $(wp post list --post_type=page --name="privacy-policy" --format=ids --allow-root) --force --allow-root || true

    - name: Forcer l'affichage du menu principal via widget
      become_user: www-data
      args:
        chdir: "/var/www/{{ http_host }}/wordpress"
      shell: |
        wp widget add navigation-menu sidebar-1 2 --title="Menu principal" --allow-root || true
      tags: [ wordpress ]


  handlers:
    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      service:
        name: apache2
        state: restarted

