---
- import_playbook: windows_config.yml
  when: not windows_config_loaded | default(false)

- name: Configuration des groupes et utilisateurs de l'Olympe
  hosts: pantheon-dc01
  tasks:

    - name: Créer la KDS Root Key
      win_shell: |
        $effectiveTime = (Get-Date).AddHours(-10)
        Add-KdsRootKey -EffectiveTime $effectiveTime
      register: kds_key

    - name: Créer les comptes gMSA
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
              [String]
              $gMSA_Name,

              [String]
              $gMSA_FQDN,

              [String[]]
              $gMSA_SPNs,

              [String[]]
              $PrincipalsAllowedToRetrieveManagedPassword,

              [String]
              $Path
          )
          Import-Module ActiveDirectory
          Set-Location AD:
          
          try {
            $principals = $PrincipalsAllowedToRetrieveManagedPassword | ForEach-Object { 
              Get-ADGroup -Identity $_ 
            }
            
            $gmsa = Get-ADServiceAccount -Filter "Name -eq '$gMSA_Name'" -ErrorAction SilentlyContinue
            if ($gmsa) {
              # Mise à jour des SPNs
              $currentSPNs = (Get-ADServiceAccount -Identity $gMSA_Name -Properties ServicePrincipalNames).ServicePrincipalNames
              $newSPNs = $gMSA_SPNs | Where-Object { $currentSPNs -notcontains $_ }
              if ($newSPNs) {
                Set-ADServiceAccount -Identity $gMSA_Name -Add @{ServicePrincipalNames = $newSPNs}
              }
              
              # Mise à jour des autres propriétés
              Set-ADServiceAccount -Identity $gMSA_Name `
                -DNSHostName $gMSA_FQDN `
                -PrincipalsAllowedToRetrieveManagedPassword $principals `
                -Enabled $true `
                -Verbose
            } else {
              New-ADServiceAccount -Name $gMSA_Name `
                -Path $Path `
                -DNSHostName $gMSA_FQDN `
                -PrincipalsAllowedToRetrieveManagedPassword $principals `
                -ServicePrincipalNames $gMSA_SPNs `
                -Enabled $true `
                -Verbose
            }
          } catch {
            throw $_
          }
        parameters:
          gMSA_Name: "{{ item.value.gMSA_Name }}"
          gMSA_FQDN: "{{ item.value.gMSA_FQDN }}"
          gMSA_SPNs: "{{ item.value.gMSA_SPNs }}"
          PrincipalsAllowedToRetrieveManagedPassword: "{{ item.value.PrincipalsAllowedToRetrieveManagedPassword }}"
          Path: "OU=OLYMPIENS,{{ lab.hosts.dc01.path }}"
      with_dict: "{{ gmsa }}"
      register: gmsa_creation
      loop_control:
        label: "{{ item.key }}"
