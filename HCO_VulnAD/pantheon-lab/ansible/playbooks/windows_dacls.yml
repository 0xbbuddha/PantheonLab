

- import_playbook: windows_config.yml

- name: Configuration des Acls sur le object Active Directory
  hosts: pantheon-dc01
  gather_facts: true
  vars:
    ansible_connection: winrm
    ansible_winrm_transport: plaintext
    ansible_winrm_server_cert_validation: ignore
    ansible_user: Administrator
    ansible_password: "{{ lab.hosts.dc01.local_admin_password }}"
    hostname: "{{ lab.hosts.dc01.hostname }}"
    domain: "{{ lab.hosts.dc01.domain }}"
    domain_username: "{{ domain }}\\Administrator"
    domain_password: "{{ lab.hosts.dc01.local_admin_password }}"
    domain_server: "{{ lab.hosts.dc01.hostname }}.{{ domain }}"

  tasks:
    - name: Configurer les ACLs via PowerShell
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
            [String] $for,
            [String[]] $to_list,
            [String] $right,
            [String] $inheritance
          )

          Import-Module ActiveDirectory
          Set-Location AD:

          $aclValues = [enum]::GetNames([System.DirectoryServices.ActiveDirectoryRights])
          $aclExtendValues = 'Ext-User-Force-Change-Password', 'Ext-Self-Self-Membership', 'Ext-Write-Self-Membership', 'Ext-ManageCA'
          $aclExtendedValueRightGUID = @{
            "Ext-User-Force-Change-Password" = @("ExtendedRight","00299570-246d-11d0-a768-00aa006e0529")
            "Ext-Write-Self-Membership" = @("WriteProperty","bf9679c0-0de6-11d0-a285-00aa003049e2")
            "Ext-Self-Self-Membership" = @("Self","bf9679c0-0de6-11d0-a285-00aa003049e2")
            "Ext-ManageCA" = @("ExtendedRight","18e470eb-9b98-47c5-896e-146c5c77100d")
          }

          # SID du 'for'
          if ($for.StartsWith("NT AUTHORITY")) {
            $forSID = New-Object System.Security.Principal.NTAccount "$for"
          } else {
            $forSID = New-Object System.Security.Principal.SecurityIdentifier (Get-ADObject -Filter "SamAccountName -eq '$for'" -Properties objectSID).objectSID
          }

          foreach ($to in $to_list) {
            try {
              $objAcl = Get-Acl -Path "$to" -ErrorAction Stop
              $objOU = $to
            } catch {
              $objOU = (Get-ADObject -Filter "SamAccountName -eq '$to'").DistinguishedName
              $objAcl = Get-Acl -Path "$objOU"
            }

            $type = [System.Security.AccessControl.AccessControlType] "Allow"
            $inheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] $inheritance

            if ($aclValues.Contains($right)) {
              $adRight = [System.DirectoryServices.ActiveDirectoryRights] $right
              $ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $forSID,$adRight,$type,$inheritanceType
            }
            elseif ($aclExtendValues.Contains($right)) {
              $extendedRightGUID = $aclExtendedValueRightGUID[$right][1]
              $extright = $aclExtendedValueRightGUID[$right][0]
              $adRight = [System.DirectoryServices.ActiveDirectoryRights] $extright
              $ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $forSID,$adRight,$type,$extendedRightGUID,$inheritanceType
            }

            if ($ace) {
              $objAcl.AddAccessRule($ace)
              Set-Acl -AclObject $objAcl -Path "$objOU"
            }
          }
        parameters:
          for: "{{ item.key }}"
          to_list: "{{ item.value.to if item.value.to is iterable and item.value.to is not string else [item.value.to] }}"
          right: "{{ item.value.right }}"
          inheritance: "{{ item.value.inheritance }}"
      loop: "{{ lab.domains[lab.hosts.dc01.domain].acls | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

