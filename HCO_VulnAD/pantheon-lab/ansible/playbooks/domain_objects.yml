---
- import_playbook: config.yml

- name: Configuration des groupes et utilisateurs de l'Olympe
  hosts: pantheon-dc01
  gather_facts: true
  vars:
    ansible_connection: winrm
    ansible_winrm_transport: plaintext
    ansible_winrm_server_cert_validation: ignore
    ansible_user: Administrator
    ansible_password: "{{ lab.hosts.dc01.local_admin_password }}"
    hostname: "{{ lab.hosts.dc01.hostname }}"
    domain: "{{ lab.hosts.dc01.domain }}"
    domain_username: "{{ domain }}\\Administrator"
    domain_password: "{{ lab.hosts.dc01.local_admin_password }}"
    domain_server: "{{ lab.hosts.dc01.hostname }}.{{ domain }}"
    ad_users: "{{ lab.domains[lab.hosts.dc01.domain].users }}"
    ad_ou: "{{ lab.domains[lab.hosts.dc01.domain].organisation_units }}"
    ad_groups: "{{ lab.domains[lab.hosts.dc01.domain].groups }}"
    gmsa: "{{ lab.domains[lab.hosts.dc01.domain].gmsa }}"
    acls: "{{ lab.domains[lab.hosts.dc01.domain].acls }}" 

  tasks:
    - name: Créer les OUs de premier niveau
      microsoft.ad.ou:
        name: "{{ item.key }}"
        path: "{{ lab.hosts.dc01.path }}"
        description: "{{ item.value.description }}"
        state: present
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_ou }}"
      register: ou_root_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Créer les OUs enfants
      microsoft.ad.ou:
        name: "{{ item.key }}"
        path: "OU=ENFERS,{{ lab.hosts.dc01.path }}"
        description: "{{ item.value.description }}"
        state: present
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_ou.ENFERS.children }}"
      register: ou_children_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Créer les groupes du domaine
      microsoft.ad.group:
        name: "{{ item.key }}"
        path: "{{ item.value.path }}"
        scope: "{{ item.value.type | default('global') }}"
        category: security
        description: "{{ item.value.description | default('') }}"
        state: present
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_groups }}"
      register: groups_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Créer la KDS Root Key
      win_shell: |
        $effectiveTime = (Get-Date).AddHours(-10)
        Add-KdsRootKey -EffectiveTime $effectiveTime
      register: kds_key

    - name: Créer les comptes gMSA
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
              [String]
              $gMSA_Name,

              [String]
              $gMSA_FQDN,

              [String[]]
              $gMSA_SPNs,

              [String[]]
              $PrincipalsAllowedToRetrieveManagedPassword,

              [String]
              $Path
          )
          Import-Module ActiveDirectory
          Set-Location AD:
          
          try {
            $principals = $PrincipalsAllowedToRetrieveManagedPassword | ForEach-Object { 
              Get-ADGroup -Identity $_ 
            }
            
            New-ADServiceAccount -Name $gMSA_Name `
              -Path $Path `
              -DNSHostName $gMSA_FQDN `
              -PrincipalsAllowedToRetrieveManagedPassword $principals `
              -ServicePrincipalNames $gMSA_SPNs `
              -Enabled $true `
              -Verbose
          } catch {
            throw $_
          }
        parameters:
          gMSA_Name: "{{ item.value.gMSA_Name }}"
          gMSA_FQDN: "{{ item.value.gMSA_FQDN }}"
          gMSA_SPNs: "{{ item.value.gMSA_SPNs }}"
          PrincipalsAllowedToRetrieveManagedPassword: "{{ item.value.PrincipalsAllowedToRetrieveManagedPassword }}"
          Path: "OU=OLYMPIENS,{{ lab.hosts.dc01.path }}"
      with_dict: "{{ gmsa }}"
      register: gmsa_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Afficher les détails de création du gMSA
      debug:
        msg: |
          Création du compte gMSA {{ item.item.key }} :
          - Nom : {{ item.item.value.gMSA_Name }}
          - FQDN : {{ item.item.value.gMSA_FQDN }}
          - SPNs : {{ item.item.value.gMSA_SPNs | join(', ') }}
          - Principaux autorisés : {{ item.item.value.PrincipalsAllowedToRetrieveManagedPassword | join(', ') }}
      loop: "{{ gmsa_creation.results }}"
      when: item.changed

    - name: Créer les utilisateurs du domaine
      microsoft.ad.user:
        name: "{{ item.key }}"
        firstname: "{{ item.value.firstname }}"
        surname: "{{ item.value.surname }}"
        password: "{{ item.value.password }}"
        password_never_expires: yes
        state: present
        path: "{{ item.value.path }}"
        description: "{{ item.value.description }}"
        groups:
          set: "{{ item.value.groups }}"
        enabled: "{{ item.value.enabled | default(true) }}"
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_users }}"
      register: users_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Configurer les ACLs
      win_shell: |
        {% for acl_name, acl in acls.items() %}
        $targetDN = {% if acl.to == 'ENFERS' or acl.to == 'TARTARE' or acl.to == 'ELYSEE' %}
          (Get-ADOrganizationalUnit -Filter "Name -eq '{{ acl.to }}'").DistinguishedName
        {% else %}
          (Get-ADGroup -Identity "{{ acl.to }}").DistinguishedName
        {% endif %}
        $acl = Get-Acl "AD:$targetDN"
        $identity = {% if acl.for in gmsa.keys() %}
          (Get-ADServiceAccount -Identity "{{ gmsa[acl.for].gMSA_Name }}").SID
        {% else %}
          (Get-ADUser -Identity "{{ acl.for }}").SID
        {% endif %}
        $adRights = [System.DirectoryServices.ActiveDirectoryRights]"{{ acl.right }}"
        $type = [System.Security.AccessControl.AccessControlType]"Allow"
        $inheritance = [System.DirectoryServices.ActiveDirectorySecurityInheritance]"{{ acl.inheritance }}"
        $rule = New-Object System.DirectoryServices.ActiveDirectoryAccessRule($identity, $adRights, $type, $inheritance)
        $acl.AddAccessRule($rule)
        Set-Acl -AclObject $acl -Path "AD:$targetDN"
        {% endfor %}
      register: acl_setup

    - name: Afficher le résumé de la configuration
      debug:
        msg: |
          Configuration terminée :
          - OUs racine créées : {{ ou_root_creation.results | map(attribute='item.key') | list }}
          - OUs enfants créées : {{ ou_children_creation.results | map(attribute='item.key') | list }}
          - Groupes créés : {{ groups_creation.results | map(attribute='item.key') | list }}
          - gMSA créés : {{ gmsa_creation.results | map(attribute='item.key') | list }}
          - Utilisateurs créés : {{ users_creation.results | map(attribute='item.key') | list }}
          - ACLs configurées : {{ acls.keys() | list }}  