---
- import_playbook: windows_config.yml

- name: Configuration des groupes et utilisateurs de l'Olympe
  hosts: pantheon-dc01
  gather_facts: true
  vars:
    ansible_connection: winrm
    ansible_winrm_transport: plaintext
    ansible_winrm_server_cert_validation: ignore
    ansible_user: Administrator
    ansible_password: "{{ lab.hosts.dc01.local_admin_password }}"
    hostname: "{{ lab.hosts.dc01.hostname }}"
    domain: "{{ lab.hosts.dc01.domain }}"
    domain_username: "{{ domain }}\\Administrator"
    domain_password: "{{ lab.hosts.dc01.local_admin_password }}"
    domain_server: "{{ lab.hosts.dc01.hostname }}.{{ domain }}"
    ad_users: "{{ lab.domains[lab.hosts.dc01.domain].users }}"
    ad_ou: "{{ lab.domains[lab.hosts.dc01.domain].organisation_units }}"
    ad_groups: "{{ lab.domains[lab.hosts.dc01.domain].groups }}"
    gmsa: "{{ lab.domains[lab.hosts.dc01.domain].gmsa }}"
    acls: "{{ lab.domains[lab.hosts.dc01.domain].acls }}" 

  tasks:
    - name: Créer les OUs de premier niveau
      microsoft.ad.ou:
        name: "{{ item.key }}"
        path: "{{ lab.hosts.dc01.path }}"
        description: "{{ item.value.description }}"
        state: present
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_ou }}"
      register: ou_root_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Créer les OUs enfants
      microsoft.ad.ou:
        name: "{{ item.key }}"
        path: "OU=ENFERS,{{ lab.hosts.dc01.path }}"
        description: "{{ item.value.description }}"
        state: present
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_ou.ENFERS.children }}"
      register: ou_children_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Créer les groupes du domaine
      microsoft.ad.group:
        name: "{{ item.key }}"
        path: "{{ item.value.path }}"
        scope: "{{ item.value.type | default('global') }}"
        category: security
        description: "{{ item.value.description | default('') }}"
        state: present
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_groups }}"
      register: groups_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Créer la KDS Root Key
      win_shell: |
        $effectiveTime = (Get-Date).AddHours(-10)
        Add-KdsRootKey -EffectiveTime $effectiveTime
      register: kds_key

    - name: Créer les comptes gMSA
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
              [String]
              $gMSA_Name,

              [String]
              $gMSA_FQDN,

              [String[]]
              $gMSA_SPNs,

              [String[]]
              $PrincipalsAllowedToRetrieveManagedPassword,

              [String]
              $Path
          )
          Import-Module ActiveDirectory
          Set-Location AD:
          
          try {
            $principals = $PrincipalsAllowedToRetrieveManagedPassword | ForEach-Object { 
              Get-ADGroup -Identity $_ 
            }
            
            $gmsa = Get-ADServiceAccount -Filter "Name -eq '$gMSA_Name'" -ErrorAction SilentlyContinue
            if ($gmsa) {
              # Mise à jour des SPNs
              $currentSPNs = (Get-ADServiceAccount -Identity $gMSA_Name -Properties ServicePrincipalNames).ServicePrincipalNames
              $newSPNs = $gMSA_SPNs | Where-Object { $currentSPNs -notcontains $_ }
              if ($newSPNs) {
                Set-ADServiceAccount -Identity $gMSA_Name -Add @{ServicePrincipalNames = $newSPNs}
              }
              
              # Mise à jour des autres propriétés
              Set-ADServiceAccount -Identity $gMSA_Name `
                -DNSHostName $gMSA_FQDN `
                -PrincipalsAllowedToRetrieveManagedPassword $principals `
                -Enabled $true `
                -Verbose
            } else {
              New-ADServiceAccount -Name $gMSA_Name `
                -Path $Path `
                -DNSHostName $gMSA_FQDN `
                -PrincipalsAllowedToRetrieveManagedPassword $principals `
                -ServicePrincipalNames $gMSA_SPNs `
                -Enabled $true `
                -Verbose
            }
          } catch {
            throw $_
          }
        parameters:
          gMSA_Name: "{{ item.value.gMSA_Name }}"
          gMSA_FQDN: "{{ item.value.gMSA_FQDN }}"
          gMSA_SPNs: "{{ item.value.gMSA_SPNs }}"
          PrincipalsAllowedToRetrieveManagedPassword: "{{ item.value.PrincipalsAllowedToRetrieveManagedPassword }}"
          Path: "OU=OLYMPIENS,{{ lab.hosts.dc01.path }}"
      with_dict: "{{ gmsa }}"
      register: gmsa_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Afficher les détails de création du gMSA
      debug:
        msg: |
          Configuration du compte gMSA {{ item.item.key }} :
          - Nom : {{ item.item.value.gMSA_Name }}
          - FQDN : {{ item.item.value.gMSA_FQDN }}
          - SPNs : {{ item.item.value.gMSA_SPNs | join(', ') }}
          - Principaux autorisés : {{ item.item.value.PrincipalsAllowedToRetrieveManagedPassword | join(', ') }}
      loop: "{{ gmsa_creation.results }}"
      when: item.changed

    - name: Créer les utilisateurs du domaine
      microsoft.ad.user:
        name: "{{ item.key }}"
        firstname: "{{ item.value.firstname }}"
        surname: "{{ item.value.surname }}"
        password: "{{ item.value.password }}"
        password_never_expires: yes
        state: present
        path: "{{ item.value.path }}"
        description: "{{ item.value.description }}"
        groups:
          set: "{{ item.value.groups }}"
        enabled: "{{ item.value.enabled | default(true) }}"
        domain_username: "{{ domain_username }}"
        domain_password: "{{ domain_password }}"
        domain_server: "{{ domain_server }}"
      with_dict: "{{ ad_users }}"
      register: users_creation
      loop_control:
        label: "{{ item.key }}"

    - name: Configurer les ACLs
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
              [String]
              $for,

              [String]
              $to,

              [String]
              $right,

              [String]
              $inheritance
          )
          Import-Module ActiveDirectory
          Set-Location AD:
          
          $aclValues = 'AccessSystemSecurity', 'CreateChild', 'Delete', 'DeleteChild', 'DeleteTree', 'ExtendedRight', 'GenericAll', 'GenericExecute', 'GenericRead', 'GenericWrite', 'ListChildren', 'ListObject', 'ReadControl', 'ReadProperty', 'Self', 'Synchronize', 'WriteDacl', 'WriteOwner', 'WriteProperty'
          $aclExtendValues = 'Ext-User-Force-Change-Password', 'Ext-Self-Self-Membership', 'Ext-Write-Self-Membership', 'Ext-ManageCA'
          
          # Récupération du SID de l'identité
          if ($for.StartsWith("NT AUTHORITY")) {
            $forSID = New-Object System.Security.Principal.NTAccount "$for"
          } else {
            $forSID = New-Object System.Security.Principal.SecurityIdentifier (Get-ADObject -Filter "SamAccountName -eq '$for'" -Properties objectSID).objectSID
          }

          # Récupération de l'objet cible
          try {
            $objAcl = get-acl -Path "$to" -ErrorAction Stop
            $objOU = $to
            $objFound = $true
          } catch [System.Management.Automation.ItemNotFoundException] {
            $objFound = $false
          }

          if (-not $objFound) {
            $extra_args = @{}
            if ($to -match "\\") {
              $extra_args.Server = $to.Split("\")[0]
              $to = $to.Split("\")[1]
            }
            $toObj = Get-ADObject -Filter "SamAccountName -eq '$to'" @extra_args
            $objOU = ($toObj).DistinguishedName
            $objAcl = get-acl -Path "$objOU"
          }

          $type = [System.Security.AccessControl.AccessControlType] "Allow"
          $inheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] $inheritance

          $aclExtendedValueRightGUID = @{
            "Ext-User-Force-Change-Password" = @("ExtendedRight","00299570-246d-11d0-a768-00aa006e0529")
            "Ext-Write-Self-Membership" = @("WriteProperty","bf9679c0-0de6-11d0-a285-00aa003049e2")
            "Ext-Self-Self-Membership" = @("Self","bf9679c0-0de6-11d0-a285-00aa003049e2")
            "Ext-ManageCA" = @("ExtendedRight","18e470eb-9b98-47c5-896e-146c5c77100d")
          }

          $Ansible.Changed = $false
          if ($aclValues.contains($right)) {
            $adRight = [System.DirectoryServices.ActiveDirectoryRights] $right
            $ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $forSID,$adRight,$type,$inheritanceType
          }
          if ($aclExtendValues.contains($right)) {
            $extendedRightGUID = $aclExtendedValueRightGUID[$right][1]
            $extright = $aclExtendedValueRightGUID[$right][0]
            $adRight = [System.DirectoryServices.ActiveDirectoryRights] $extright
            $ace = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $forSID,$extright,$type,$extendedRightGUID,$inheritanceType
          }
          if ($ace) {
            $objAcl.AddAccessRule($ace)
            Set-Acl -AclObject $objAcl -path "$objOU"
            $Ansible.Changed = $true
          }
        parameters:
          for: "{{ item.value.for }}"
          to: "{{ item.value.to }}"
          right: "{{ item.value.right }}"
          inheritance: "{{ item.value.inheritance }}"
      with_dict: "{{ acls }}"
      register: acl_setup
      loop_control:
        label: "{{ item.key }}"

    - name: Afficher le résumé de la configuration
      debug:
        msg: |
          Configuration terminée :
          - OUs racine créées : {{ ou_root_creation.results | map(attribute='item.key') | list }}
          - OUs enfants créées : {{ ou_children_creation.results | map(attribute='item.key') | list }}
          - Groupes créés : {{ groups_creation.results | map(attribute='item.key') | list }}
          - gMSA créés : {{ gmsa_creation.results | map(attribute='item.key') | list }}
          - Utilisateurs créés : {{ users_creation.results | map(attribute='item.key') | list }}
          - ACLs configurées : {{ acls.keys() | list }}  

